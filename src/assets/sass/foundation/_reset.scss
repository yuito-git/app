@charset 'UTF-8';
@use "sass:math";
@use "../global" as *;

/*
  # Global
---------------------------------------------- */
/**
 * Default box-sizing
 */

*,
::before,
::after {
  //全要素、擬似要素のボックスの計算方法は親要素から継承する
  box-sizing: inherit;
  //文字のスタイルを親要素から継承する
  font-style: inherit;
}

/**
 * Resetting margins, paddings, and borders
 */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
main,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  //いろんなタグの内外の余白、境界線をなくす
  margin: 0;
  padding: 0;
  border: 0;
}

/**
 * Resetting HTML5 Elements for older browsers
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section {
  //古いブラウザのHTML5要素をリセット
  display: block;
}

/*
  # Document & Sections
---------------------------------------------- */
html {
  //ボックスモデルにpaddingとborderを含める
  box-sizing: border-box;
  //最低の高さががビューポートの高さいっぱい(子要素のheight:100%;を有効にするため)
  min-height: 100vh;
  //垂直方向のスクロールを許可
  overflow-y: scroll;
  //文字サイズの自動拡大サイズを制御
  -webkit-text-size-adjust: 100%;
  //ページ内リンクで移動するときの動きがスムーズ
  scroll-behavior: smooth;
  font-style: normal;

  &.is-useJs {
    //JS使用環境
    //画面ロードした瞬間、スクロールさせない
    overflow-y: hidden;
    //画面ロードした瞬間、パンやズーム操作を無効化
    //※a要素やbutton要素は機能するし、タッチイベントは発生する
    touch-action: none;

    @include mq(lg) {
      //992px以上の時、スクロール許可
      overflow-y: visible;
    }
  }

  &.is-loaded {
    //画面ロードアニメーションが終わったら、垂直方向のスクロール許可
    overflow-y: visible;
    //画面ロードアニメーションが終わったら、パンやズーム操作許可
    touch-action: auto;
  }

  &.is-drawerActive {
    //ドロワーメニューが開いているときはスクロールさせない
    overflow-y: hidden;
    //ドロワーメニューが開いている時は、パンやズーム操作を無効化
    //※a要素やbutton要素は機能するし、タッチイベントは発生する
    touch-action: none;

    @include mq(lg) {
      //992px以上の時、スクロール許可
      overflow-y: visible;
    }
  }
}

body {
  //最低の高さがhtml要素と同じ
  min-height: 100%;
  //色設定 "../global/setting/_color.scss"を参照
  color: $primary-text-color;
  //【fontプロパティ指定順序】
  //①font-style,font-weight指定(順不同で省略可)
  //②font-size指定(省略不可)
  //③font-sizeの指定の後に「/」(スラッシュ)でline-height指定（省略可）
  //④font-family指定(省略不可)
  font: 1em/1.5 $font-set-primary;
  //文字の間隔設定
  letter-spacing: 0.05em;

  //文字を描画する時の最適化方法をレンダリングエンジンに伝える
  //一部のフォントにおいて20pxより小さい文字に合字(リガチャ)を適用
  //【参照記事】
  //・https://developer.mozilla.org/ja/docs/Web/CSS/text-rendering
  //・https://manual-torisetsu.com/blog/3575/
  text-rendering: optimizelegibility;
  //OpenTypeフォントの文字詰め設定
  //【参考記事】
  //・https://www.wantedly.com/companies/www-vivion-co/post_articles/343387
  //・https://ics.media/entry/14087/#otf
  // font-feature-settings: "palt";
  font-feature-settings: "pkna";

  @include ie() {
    &::before {
      content: "このブラウザーは古いため、一部表示に乱れが生じる可能性がありますので、ご了承ください。できるだけ最新版のWindowsでご利用いただくか、別のブラウザーをお使いください！";
      display: block;
      padding: 2rem;
      background-color: yellow;
      color: black;
    }
  }

  .is-drawerActive & {
    //is-drawerActiveのついたbody要素
    overflow-y: hidden;
    touch-action: none;

    @include mq(lg) {
      overflow-y: visible;
    }
  }

  &::after {
    //ローディングアニメーション(JS無効環境)
    content: "";
    position: fixed;
    z-index: 10;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    animation: fadeOut 1s $easing 3s 1 both;
    background-color: #fff;

    .is-useJs & {
      //JS有効環境の時アニメーションさせない
      animation: none;
    }

    .is-loaded & {
      //ローディングアニメーションが終わった時の消え方
      visibility: hidden;
      transform: translate3d(-5%, 0, 0) scale3d(0, 1, 1);
      transform-origin: left center;
      transition-property: transform, visibility;
      transition-duration: 0.8s, 0.1s;
      transition-timing-function: $easing-cut;
      transition-delay: 0.5s, 1.5s;
      pointer-events: none;
      will-change: transform;
    }
  }
}

/*
  # Grouping content
---------------------------------------------- */
blockquote,
q {
  //引用符を消す
  quotes: none;
}

blockquote:after,
blockquote:before,
q:after,
q:before {
  content: "";
  //擬似要素を削除
  content: none;
}

hr {
  overflow: visible;
}

ol,
ul {
  list-style: none;
}

pre {
  font-family: monospace;
  font-size: 1em;
}

/*
  # Text-level semantics
---------------------------------------------- */
a {
  background-color: transparent;
  //iOS8以降とSafari8以降でリンクの下線の隙間をなくす→https://github.com/necolas/normalize.css/pull/573
  -webkit-text-decoration-skip: objects;
  color: inherit;
  text-decoration: none;
}

a:active,
a:hover {
  outline-width: 0;
}

abbr[title] {
  border-bottom: none;
  text-decoration: underline dotted;
  text-decoration: underline;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
samp {
  font-family: monospace;
  font-size: 1em;
}

dfn {
  font-style: italic;
}

mark {
  background-color: #ff0;
  color: #000;
}

small {
  font-size: 0.8em;
}

sub,
sup {
  position: relative;
  font-size: 0.75em;
  line-height: 0;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/*
  # Embedded content
---------------------------------------------- */
audio,
canvas,
progress,
video {
  display: inline-block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

img,
video {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
}

svg:not([fill]) {
  fill: currentcolor;
}

svg:not(:root) {
  overflow: hidden;
}

/*
  # Tabular data
---------------------------------------------- */
table {
  //隣接するセルの境界間の距離を無くす
  border-spacing: 0;
  border-collapse: collapse;
}

/*
  # Forms
---------------------------------------------- */
button,
input,
optgroup,
select,
textarea {
  margin: 0;
  font: inherit;
}

button,
select {
  text-transform: none;
}

button,
input {
  overflow: visible;
}

button,
[type="button"],
[type="reset"],
[type="submit"],
[role="button"] {
  cursor: pointer;
  -webkit-appearance: button;
}

button:-moz-focusring,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  outline: 1px dotted ButtonText;
}

legend {
  display: table;
  max-width: 100%;
  color: inherit;
  white-space: normal;
}

optgroup {
  font-weight: bold;
}

progress {
  vertical-align: baseline;
}

textarea {
  overflow: auto;
  resize: vertical;
}

[type="checkbox"],
[type="radio"] {
  padding: 0;
}

[type="search"] {
  outline-offset: -2px;
  -webkit-appearance: textfield;
}

::-webkit-file-upload-button {
  font: inherit;
  -webkit-appearance: button;
}

/*
  # Interactive & Misc
---------------------------------------------- */
summary {
  display: list-item;
}

template,
[hidden] {
  display: none;
}

/*
  # Accessibility
---------------------------------------------- */
[disabled],
[aria-disabled="true"] {
  cursor: not-allowed;
}

[aria-busy="true"] {
  cursor: progress;
}

[aria-controls] {
  cursor: pointer;
}

[aria-hidden="false"][hidden] {
  display: initial;
}

[aria-hidden="false"][hidden]:not(:focus) {
  position: absolute;
  clip: rect(0, 0, 0, 0);
}

:focus:not(:focus-visible),
::before:focus:not(:focus-visible),
::after:focus:not(:focus-visible) {
  //キーボードのタブ移動でフォーカスが当たった場合に適用される擬似クラスを利用する→https://nullnull.dev/blog/css-focus-visible/
  //マウスクリック時
  outline: none;
}

/**
 * Prettier ignore
 */
@media (prefers-reduced-motion: reduce) {
  //OSの「視差効果」設定が有効の時
  //【NG例】
  //*,
  // ::before,
  // ::after {
  //   transition: none !important;
  //   animation: none !important;
  // }
  //【解説：問題点2つ】
  //①opacityが0から1に変化するアニメーションが設定されている場合、要素が表示されないままになる
  //②transitionend や animationend イベントが発火しない問題アニメーションが終了したときに JS で何らかの処理を行う場合、イベントが発火しないため処理が行われないままになる
  //【参照記事】
  //・https://note.com/takamoso/n/ncd758ab68491
  *,
  ::before,
  ::after {
    transition-duration: 1ms !important;
    transition-delay: 0s !important;
    animation-duration: 1ms !important;
    animation-delay: -1ms !important;
    animation-iteration-count: 1 !important;
    background-attachment: initial !important;
    scroll-behavior: auto !important;
  }
}

/**
 * Checker
 */
button:not([type]):after {
  //button要素にtype属性がついていない時エラーを出す（開発時のみ必要）
  //button要素のデフォルトtype属性はsubmitでただのボタンとして使いたい時は、type='button'を指定
  content: "警告： このbuttonにはtype属性がありません";
  background-color: red;
  color: #fff;
}
