@charset "UTF-8";
@use "sass:math";
@use "../global" as *;
//====================================
//  Olex Grid
//====================================

.l-olex {
  $this: &; //入れ子内でl-gridを参照するため
  display: flex;
  flex-wrap: wrap; //折返し許可
  margin: 0;
  padding: 0;

  // Direction・・並び順指定
  // ----------------------------
  &[data-dir="normal"] {
    flex-direction: row;
  }

  &[data-dir="reverse"] {
    flex-direction: row-reverse;
  }

  // Alignment・・配置指定
  // ----------------------------
  &[data-align~="start"] {
    //属性値が空白区切りの単語に一致する要素
    justify-content: flex-start;
  }

  &[data-align~="center"] {
    justify-content: center;
  }

  &[data-align~="end"] {
    justify-content: flex-end;
  }

  &[data-align~="justify"] {
    justify-content: space-between;
  }

  &[data-align~="top"] {
    align-items: flex-start;
  }

  &[data-align~="middle"] {
    align-items: center;
  }

  &[data-align~="bottom"] {
    align-items: flex-end;
  }

  @each $device, $breakpoint in $breakpoints {
    @media screen and (min-width: $breakpoint) {
      //ブレイクポイントごとに対応する
      &[data-align~="#{$device}:start"] {
        justify-content: flex-start;
      }

      &[data-align~="#{$device}:center"] {
        justify-content: center;
      }

      &[data-align~="#{$device}:end"] {
        justify-content: flex-end;
      }

      &[data-align~="#{$device}:justify"] {
        justify-content: space-between;
      }

      &[data-align~="#{$device}:top"] {
        align-items: flex-start;
      }

      &[data-align~="#{$device}:middle"] {
        align-items: center;
      }

      &[data-align~="#{$device}:bottom"] {
        align-items: flex-end;
      }
    }
  }

  &__item {
    display: flex;
    box-sizing: border-box;
    flex-direction: column;
    margin: 0;

    // Alignment・・アイテムの配置指定
    // ----------------------------
    &[data-align~="start"] {
      align-items: flex-start;
    }

    &[data-align~="center"] {
      align-items: center;
    }

    &[data-align~="end"] {
      align-items: flex-end;
    }

    &[data-align~="top"] {
      justify-content: flex-start;
    }

    &[data-align~="middle"] {
      justify-content: center;
    }

    &[data-align~="bottom"] {
      justify-content: flex-end;
    }

    @each $device, $breakpoint in $breakpoints {
      @media screen and (min-width: $breakpoint) {
        &[data-align~="#{$device}:start"] {
          align-items: flex-start;
        }

        &[data-align~="#{$device}:center"] {
          align-items: center;
        }

        &[data-align~="#{$device}:end"] {
          align-items: flex-end;
        }

        &[data-align~="#{$device}:top"] {
          justify-content: flex-start;
        }

        &[data-align~="#{$device}:middle"] {
          justify-content: center;
        }

        &[data-align~="#{$device}:bottom"] {
          justify-content: flex-end;
        }
      }
    }
  }

  // Grid
  // ----------------------------
  &[data-gutter] {
    width: auto;

    & > #{$this}__item {
      border: solid transparent;
      background-clip: padding-box; //borderで余白をつけるから背景色が描画される範囲をpadding領域までにしておく
    }
  }

  @each $device, $breakpoint in $breakpoints {
    @media screen and (min-width: $breakpoint) {
      @each $size, $val in $gutters {
        &[data-gutter~="#{$device}:#{$size}"] {
          margin: math.div(
            pxToRem(-$val),
            2
          ); //余計なborderをネガティブマージンで消す。2で割るのは、隣り合う要素の余白1つ分を消すため
          margin: max(math.div(pxToVw(-$val), 2), math.div(pxToRem(-$val), 2));

          & > #{$this}__item {
            border-width: math.div(pxToRem($val), 2);
            border-width: min(math.div(pxToVw($val), 2), math.div(pxToRem($val), 2)); //四隅に余白用のborderを指定
          }
        }
      }

      &__item {
        //$iが1からグリッドカラム数12までくりかえす
        //グリッドアイテムにグリッド何個分の幅にするか指定
        @for $i from 1 through $column {
          &[data-cols~="#{$device}:#{$i}"] {
            width: math.percentage(math.div($i, $column));
          }
        }

        &[data-cols~="#{$device}:Five"] {
          width: 20%;
        }

        &[data-cols~="#{$device}:Auto"] {
          width: auto;
        }

        @for $i from 0 through 3 {
          &[data-order~="#{$device}:#{$i}"] {
            order: $i;
          }

          &[data-grow~="#{$device}:#{$i}"] {
            flex-grow: $i;
          }
        }
      }
    }
  }
}
